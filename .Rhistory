View(points)
picks <- merge(picks, players, by.x = "element", by.y = "id")
userPicks <- function(user_id, gameweek) {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get player/teams list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- subset(players$teams, select = c(id, name, strength, code))
players <- subset(players$elements, select = c(id, web_name, team_code))
#get user picks data
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", gameweek, "/picks"),
simplifyVector = TRUE)
picks <- data$picks
#get player points data
points <- list()
for (i in picks$element) {
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
i),
simplifyVector = TRUE)
data <- subset(data$history, round == gameweek,
select = c(id, kickoff_time, team_h_score:value,
selected:transfers_out, minutes:dribbles,
fixture, opponent_team))
data$element <- i
points[[i]] <- data
}
points <- do.call(rbind, points)
#replace player/team codes with matching values
points <- merge(points, teams, by.x = "opponent_team", by.y = "id")
points <- merge(points, teams, by.x = "code", by.y = "code")
#convert player values to fpl-familiar style
points$price <- points$value / 10
#convert var types
points$influence <- as.numeric(points$influence)
points$creativity <- as.numeric(points$creativity)
points$threat <- as.numeric(points$threat)
points$ict_index <- as.numeric(points$ict_index)
#drop cols
points <- subset(points, select = -c(opponent_team, value, id.y,
code))
)
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- subset(players$teams, select = c(id, name, strength, code))
players <- subset(players$elements, select = c(id, web_name, team_code))
#get user picks data
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", gameweek, "/picks"),
simplifyVector = TRUE)
picks <- data$picks
#get player points data
points <- list()
for (i in picks$element) {
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
i),
simplifyVector = TRUE)
data <- subset(data$history, round == gameweek,
select = c(id, kickoff_time, team_h_score:value,
selected:transfers_out, minutes:dribbles,
fixture, opponent_team))
data$element <- i
points[[i]] <- data
}
points <- do.call(rbind, points)
#replace player/team codes with matching values
points <- merge(points, teams, by.x = "opponent_team", by.y = "id")
points <- merge(points, teams, by.x = "code", by.y = "code")
#convert player values to fpl-familiar style
points$price <- points$value / 10
#convert var types
points$influence <- as.numeric(points$influence)
points$creativity <- as.numeric(points$creativity)
points$threat <- as.numeric(points$threat)
points$ict_index <- as.numeric(points$ict_index)
#drop cols
points <- subset(points, select = -c(opponent_team, value, id.y,
code))
picks <- merge(picks, players, by.x = "element", by.y = "id")
picks <- merge(picks, points, by = "element")
#get player/teams list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- subset(players$teams, select = c(id, name, strength, code))
players <- subset(players$elements, select = c(id, web_name, team_code))
#get user picks data
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", gameweek, "/picks"),
simplifyVector = TRUE)
picks <- data$picks
#get player points data
points <- list()
for (i in picks$element) {
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
i),
simplifyVector = TRUE)
data <- subset(data$history, round == gameweek,
select = c(id, kickoff_time, team_h_score:value,
selected:transfers_out, minutes:dribbles,
fixture, opponent_team))
data$element <- i
points[[i]] <- data
}
points <- do.call(rbind, points)
#replace player/team codes with matching values
points <- merge(points, teams, by.x = "opponent_team", by.y = "id")
points <- merge(points, teams, by.x = "code", by.y = "code")
#convert player values to fpl-familiar style
points$price <- points$value / 10
#convert var types
points$influence <- as.numeric(points$influence)
points$creativity <- as.numeric(points$creativity)
points$threat <- as.numeric(points$threat)
points$ict_index <- as.numeric(points$ict_index)
#drop cols
points <- subset(points, select = -c(opponent_team, value, id.y,
code))
# merge player picks with metadata
picks <- merge(picks, players, by.x = "element", by.y = "id")
picks <- merge(picks, points, by = "element")
#rename cols
points <- dplyr::rename(points, opponent_team=name.x, player_name=web_name,
opponent_team_strength=strength.x, player_team_strength=strength.y,
player_team=name.y)
picks <- dplyr::rename(points, opponent_team=name.x, player_name=web_name,
opponent_team_strength=strength.x, player_team_strength=strength.y,
player_team=name.y)
picks <- dplyr::rename(picks, opponent_team=name.x, player_name=web_name,
opponent_team_strength=strength.x, player_team_strength=strength.y,
player_team=name.y)
picks <- picks[c("round", "fixture", "element", "position", "player_name", "player_team",
"player_team_strength", "opponent_team",
"opponent_team_strength", "kickoff_time", "team_h_score",
"team_a_score", "was_home", "is_captain",
"is_vice_captain", "multiplier", "total_points", "price",
"selected", "transfers_in", "transfers_out", "minutes",
"goals_scored", "assists", "clean_sheets", "goals_conceded",
"own_goals", "penalties_saved", "penalties_missed",
"yellow_cards", "red_cards", "saves", "bonus", "bps", "influence",
"creativity", "threat", "ict_index", "ea_index",
"open_play_crosses", "big_chances_created",
"clearances_blocks_interceptions", "recoveries", "key_passes",
"tackles", "winning_goals", "attempted_passes", "completed_passes",
"penalties_conceded", "big_chances_missed", "errors_leading_to_goal",
"errors_leading_to_goal_attempt", "tackled", "offside",
"target_missed", "fouls", "dribbles")]
userPicks <- function(user_id, gameweek) {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get player/teams list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- subset(players$teams, select = c(id, name, strength, code))
players <- subset(players$elements, select = c(id, web_name, team_code))
#get user picks data
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", gameweek, "/picks"),
simplifyVector = TRUE)
picks <- data$picks
#get player points data
points <- list()
for (i in picks$element) {
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
i),
simplifyVector = TRUE)
data <- subset(data$history, round == gameweek,
select = c(id, kickoff_time, team_h_score:value,
selected:transfers_out, minutes:dribbles,
fixture, opponent_team))
data$element <- i
points[[i]] <- data
}
points <- do.call(rbind, points)
#replace player/team codes with matching values
points <- merge(points, teams, by.x = "opponent_team", by.y = "id")
points <- merge(points, teams, by.x = "code", by.y = "code")
#convert player values to fpl-familiar style
points$price <- points$value / 10
#convert var types
points$influence <- as.numeric(points$influence)
points$creativity <- as.numeric(points$creativity)
points$threat <- as.numeric(points$threat)
points$ict_index <- as.numeric(points$ict_index)
#drop cols
points <- subset(points, select = -c(opponent_team, value, id.y,
code))
# merge player picks with metadata
picks <- merge(picks, players, by.x = "element", by.y = "id")
picks <- merge(picks, points, by = "element")
#rename cols
picks <- dplyr::rename(picks, opponent_team=name.x, player_name=web_name,
opponent_team_strength=strength.x, player_team_strength=strength.y,
player_team=name.y)
# reorder cols
picks <- picks[c("round", "fixture", "element", "position", "player_name", "player_team",
"player_team_strength", "opponent_team",
"opponent_team_strength", "kickoff_time", "team_h_score",
"team_a_score", "was_home", "is_captain",
"is_vice_captain", "multiplier", "total_points", "price",
"selected", "transfers_in", "transfers_out", "minutes",
"goals_scored", "assists", "clean_sheets", "goals_conceded",
"own_goals", "penalties_saved", "penalties_missed",
"yellow_cards", "red_cards", "saves", "bonus", "bps", "influence",
"creativity", "threat", "ict_index", "ea_index",
"open_play_crosses", "big_chances_created",
"clearances_blocks_interceptions", "recoveries", "key_passes",
"tackles", "winning_goals", "attempted_passes", "completed_passes",
"penalties_conceded", "big_chances_missed", "errors_leading_to_goal",
"errors_leading_to_goal_attempt", "tackled", "offside",
"target_missed", "fouls", "dribbles")]
return(picks[order(picks$position),])
}
test <- userPicks(137633, 38)
View(test)
userPicks <- function(user_id, gameweek) {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get player/teams list
players <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- subset(players$teams, select = c(id, name, strength, code))
players <- subset(players$elements, select = c(id, web_name, team_code))
#get user picks data
data <-  jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/event/", gameweek, "/picks"),
simplifyVector = TRUE)
picks <- data$picks
#get player points data
points <- list()
for (i in picks$element) {
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/element-summary/",
i),
simplifyVector = TRUE)
data <- subset(data$history, round == gameweek,
select = c(id, kickoff_time, team_h_score:value,
selected:transfers_out, minutes:dribbles,
fixture, opponent_team))
data$element <- i
points[[i]] <- data
}
points <- do.call(rbind, points)
#replace player/team codes with matching values
points <- merge(points, teams, by.x = "opponent_team", by.y = "id")
points <- merge(points, teams, by.x = "code", by.y = "code")
#convert player values to fpl-familiar style
points$price <- points$value / 10
#convert var types
points$influence <- as.numeric(points$influence)
points$creativity <- as.numeric(points$creativity)
points$threat <- as.numeric(points$threat)
points$ict_index <- as.numeric(points$ict_index)
#drop cols
points <- subset(points, select = -c(opponent_team, value, id.y,
code))
# merge player picks with metadata
picks <- merge(picks, players, by.x = "element", by.y = "id")
picks <- merge(picks, points, by = "element")
#rename cols
picks <- dplyr::rename(picks, opponent_team=name.x, player_name=web_name,
opponent_team_strength=strength.x, player_team_strength=strength.y,
player_team=name.y)
# reorder cols
picks <- picks[c("round", "fixture", "element", "position", "player_name", "player_team",
"player_team_strength", "opponent_team",
"opponent_team_strength", "kickoff_time", "team_h_score",
"team_a_score", "was_home", "is_captain",
"is_vice_captain", "multiplier", "total_points", "price",
"selected", "transfers_in", "transfers_out", "minutes",
"goals_scored", "assists", "clean_sheets", "goals_conceded",
"own_goals", "penalties_saved", "penalties_missed",
"yellow_cards", "red_cards", "saves", "bonus", "bps", "influence",
"creativity", "threat", "ict_index", "ea_index",
"open_play_crosses", "big_chances_created",
"clearances_blocks_interceptions", "recoveries", "key_passes",
"tackles", "winning_goals", "attempted_passes", "completed_passes",
"penalties_conceded", "big_chances_missed", "errors_leading_to_goal",
"errors_leading_to_goal_attempt", "tackled", "offside",
"target_missed", "fouls", "dribbles")]
return(tibble::as.tibble(picks[order(picks$position),]))
}
devtools::document()
devtools::use_package("dplyr")
devtools::document()
devtools::use_vignette("fplR-intro")
require(fplR)
devtools::install_github("ewenme/fplR")
require(fplR)
players <- getPlayers()
str(players)
Sanchez <- getPlayerDetailed(player_id = 12)
str(Sanchez)
SanchezDetailed <- getPlayerDetailed(player_id = 12)
str(SanchezDetailed)
CechSeasons <- getPlayerSeasons(player_id = 2)
View(CechSeasons)
str(CechSeasons)
str(players1617)
str(fixtures1617)
getTeams()
user123 <- userInfo(user_id = 123)
str(user123)
user123Performance <- userPerformance(user_id = 123)
View(user123Performance)
str(user123Performance)
user123Competition <- userCompetition(user_id = 123, type = "classic")
View(user123Competition)
myInfo <- userInfo(user_id = 137633)
str(myInfo)
myPerformance <- userPerformance(user_id = 137633)
str(myPerformance)
myCompetitions <- userCompetition(user_id = 137633, type = "classic")
str(myCompetitions)
View(myCompetitions)
myPicks <- userPicks(user_id = 137633, gameweek = 1)
str(myPicks)
myHistory <- userHistory(user_id = 137633)
str(myHistory)
teams <- getTeams()
str(teams)
devtools::document()
devtools::document()
devtools::install_github("ewenme/fplR")
devtools::build()
devtools::build()
devtools::document()
devtools::install_github("ewenme/fplR")
devtools::install_github("ewenme/fplR", build_vignettes = TRUE).
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build()
devtools::build()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::use_vignette("fplR-EDA")
fixtures <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- extract$teams
#get fixtures
fixtures <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE)
#replace codes with matching values
fixtures$team_a <- with(teams, name[match(fixtures$team_a, id)])
fixtures$team_h <- with(teams, name[match(fixtures$team_h, id)])
return(tibble::as.tibble(fixtures))
}
test <- fixtures()
View(test)
test2 <- fixtures1617
test2 <- fplR::fixtures1617
View(test2)
str(test)
View(test)
View(test2)
library(dplyr)
library(jsonlite)
library(tibble)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
extract <- extract$teams %>%
select(id, name)
return(tibble::as.tibble(extract))
}
#get teams metadata
teams <- getTeams()
#get 2016/17 fixtures data
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE) %>%
select(-provisional_start_time, -finished_provisional, -started,
-deadline_time, -deadline_time_formatted)
#replace codes with matching values
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
use_data(fixtures1617, overwrite = TRUE)
glimpse(fixtures1617)
devtools::use_data(fixtures1617, overwrite = TRUE)
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
devtools::use_data(players1617, overwrite = TRUE)
test <- fixtures()
test2 <- fixtures1617
devtools::document()
test2 <- fixtures1617
View(test2)
View(test)
devtools::install_github("ewenme/fplR")
test <- fixtures()
test2 <- fixtures1617
test <- fixtures()
library(fplR)
test <- fixtures()
test2 <- fixtures1617
test <- players()
test2 <- players1617
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers()
devtools::use_data(players1617, overwrite = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("ewenme/fplR")

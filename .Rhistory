simplifyVector = TRUE)
test <- data$leagues
userPerformance <- function(user_id, type="classic") {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#check the input is a specified choice, stop if not
if (!type %in% c("classic", "h2h", "cup"))
stop("Type not found. Try classic, h2h or cup.")
#get data
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id),
simplifyVector = TRUE)
if(type == "classic")
return(data$leagues$classic)
else if(type == "h2h")
return(data$leagues$h2h)
else if(type == "cup")
return(data$leagues$cup)
}
test <- userPerformance(137633, "classic")
View(test)
test <- userPerformance(137633, "h2h")
test <- userPerformance(137633, "cup")
test <- userPerformance(137633, "ddd")
test <- userPerformance("137633", "ddd")
extract$phases
extract$elements
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(data$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
test <- getPlayers()
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(data$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
test <- getPlayers()
View(test)
detach("package:dplyr", unload=TRUE)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(data$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
test <- getPlayers()
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(data$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
test <- getPlayers()
library("dplyr", lib.loc="~/Documents/Github/fplR/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
str(data_prev_season)
document()
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
saveRDS(data_prev_season, file = "~/Documents/Github/fplR/data/players1516.Rda")
document()
document()
use_data(data_prev_season)
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516)
document()
detach("package:dplyr", unload=TRUE)
document()
document()
document()
document()
document()
use_travis()
use_travis()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data_raw()
document()
use_travis()
document()
document()
use_mit_license()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516, overwrite = TRUE)
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516, overwrite = TRUE)
document()
document()
document()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1617, overwrite = TRUE)
document()
document()

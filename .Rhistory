data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
test <- getPlayers()
library("dplyr", lib.loc="~/Documents/Github/fplR/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
str(data_prev_season)
document()
data_prev_season <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
saveRDS(data_prev_season, file = "~/Documents/Github/fplR/data/players1516.Rda")
document()
document()
use_data(data_prev_season)
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516)
document()
detach("package:dplyr", unload=TRUE)
document()
document()
document()
document()
document()
use_travis()
use_travis()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data_raw()
document()
use_travis()
document()
document()
use_mit_license()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516, overwrite = TRUE)
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1516 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1516, overwrite = TRUE)
document()
document()
document()
document()
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
use_data(players1617, overwrite = TRUE)
document()
document()
install.packages("rmarkdown")
devtools::install_github("ewenme/fplR")
library(fplR)
test <- getPlayerDetailed(12)
View(test)
packrat::snapshot(prompt = FALSE)
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE)
View(test)
View(test)
View(test)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams()
View(teams)
devtools::install_github("ewenme/fplR")
library(roxygen2)
library(devtools)
document()
devtools::install_github("ewenme/fplR")
View(teams)
View(test)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams()
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE)
View(teams)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE) %>%
select(id, name)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams()
library(dplyr)
library(jsonlite)
library(tibble)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE) %>%
select(id, name)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams()
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE) %>%
select(teams$id, teams$name)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams()
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
return(tibble::as.tibble(extract$teams))
}
teams <- getTeams() %>%
select(id, name)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
extract <- extract$teams %>%
select(id, name)
return(tibble::as.tibble(extract))
}
teams <- getTeams()
View(fixtures1617)
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
View(fixtures1617)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
extract <- extract$teams %>%
select(id, name)
return(tibble::as.tibble(extract))
}
#get teams metadata
teams <- getTeams()
#get 2016/17 fixtures data
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE) %>%
select(-stats)
#replace codes with matching values
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
teams <- getTeams()
#get 2016/17 fixtures data
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE) %>%
select(-stats, -provisional_start_time, -finished_provisional, -minutes, -finished, -started,
-deadline_time, -deadline_time_formatted)
#replace codes with matching values
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
use_data(fixtures1617, overwrite = TRUE)
players1617
View(fixtures1617)
glimpse(fixtures1617)
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE) %>%
select(-stats, -provisional_start_time, -finished_provisional, -minutes, -finished, -started,
-deadline_time, -deadline_time_formatted, -kickoff_time_formatted)
#replace codes with matching values
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
use_data(fixtures1617, overwrite = TRUE)
glimpse(fixtures1617)
document()
document()
document()
document()
document()
devtools::install_github("ewenme/fplR")
devtools::install_github("ewenme/fplR")
devtools::install_github("ewenme/fplR", force=TRUE)
library("fplR", lib.loc="~/Documents/Github/fplR/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
fixtures1617
library(fplR)
test <- getPlayerDetailed(12)
View(test)
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/")
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/", simplifyVector = TRUE)
test$stats
test$stats[[1]]
test$stats[[1]]
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/entry/123/history", simplifyVector = TRUE)
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/entry/123/history", simplifyVector = TRUE)
chips <- test$chips
View(chips)
entry <- test$entry
entry <- test$leagues
season <- test$season
View(season)
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/entry/137633/history", simplifyVector = TRUE)
season <- test$season
View(season)
View(chips)
library("devtools", lib.loc="~/Documents/Github/fplR/packrat/lib/x86_64-apple-darwin15.6.0/3.4.0")
document()
devtools::install_github("ewenme/fplR")
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/entry/137633/history")
season <- test$season
season <- test$history
history <- test$history
rm(seasom)
rm(season)
history <- test$history
library(dplyr)
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/entry/137633/history", simplifyVector = TRUE)
history <- test$history
View(history)
userPerformance <- function(user_id, type="classic") {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get data
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/137633/",
user_id, "/history"),
simplifyVector = TRUE)
return(data$history)
}
userPerformance(137633)
test <- userPerformance(137633)
userPerformance <- function(user_id, type="classic") {
#check the input is numeric, stop if not
if (!is.numeric(user_id))
stop("user_id isn't numeric format.")
#get data
data <- jsonlite::read_json(paste0("https://fantasy.premierleague.com/drf/entry/",
user_id, "/history"),
simplifyVector = TRUE)
return(data$history)
}
test <- userPerformance(137633)
View(test)
rm(test, history, userPerformance)
devtools::document()
devtools::install_github("ewenme/fplR")
devtools::document()
test <- fplR::players1617
devtools::document()
devtools::document()
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/event/1/live")
fixtures <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/")
test <- jsonlite::read_json("https://fantasy.premierleague.com/drf/event/1/live", simplifyVector = TRUE)
fixtures <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/", simplifyVector = TRUE)
View(fixtures)
stats <- fixtures$stats
stats[[1]]
stats[1]
test <- as.data.frame(stats[1])
View(test)
library(dplyr)
install.packages("tidyr")
library(tidyr)
unnest(stats)
unnest(stats[1])
View(fixtures)
unnest(fixtures$stats)

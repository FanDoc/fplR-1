SanchezDetailed <- getPlayerDetailed(player_id = 12)
str(SanchezDetailed)
CechSeasons <- getPlayerSeasons(player_id = 2)
View(CechSeasons)
str(CechSeasons)
str(players1617)
str(fixtures1617)
getTeams()
user123 <- userInfo(user_id = 123)
str(user123)
user123Performance <- userPerformance(user_id = 123)
View(user123Performance)
str(user123Performance)
user123Competition <- userCompetition(user_id = 123, type = "classic")
View(user123Competition)
myInfo <- userInfo(user_id = 137633)
str(myInfo)
myPerformance <- userPerformance(user_id = 137633)
str(myPerformance)
myCompetitions <- userCompetition(user_id = 137633, type = "classic")
str(myCompetitions)
View(myCompetitions)
myPicks <- userPicks(user_id = 137633, gameweek = 1)
str(myPicks)
myHistory <- userHistory(user_id = 137633)
str(myHistory)
teams <- getTeams()
str(teams)
devtools::document()
devtools::document()
devtools::install_github("ewenme/fplR")
devtools::build()
devtools::build()
devtools::document()
devtools::install_github("ewenme/fplR")
devtools::install_github("ewenme/fplR", build_vignettes = TRUE).
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build()
devtools::build()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::use_vignette("fplR-EDA")
fixtures <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
teams <- extract$teams
#get fixtures
fixtures <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE)
#replace codes with matching values
fixtures$team_a <- with(teams, name[match(fixtures$team_a, id)])
fixtures$team_h <- with(teams, name[match(fixtures$team_h, id)])
return(tibble::as.tibble(fixtures))
}
test <- fixtures()
View(test)
test2 <- fixtures1617
test2 <- fplR::fixtures1617
View(test2)
str(test)
View(test)
View(test2)
library(dplyr)
library(jsonlite)
library(tibble)
getTeams <- function() {
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
extract <- extract$teams %>%
select(id, name)
return(tibble::as.tibble(extract))
}
#get teams metadata
teams <- getTeams()
#get 2016/17 fixtures data
fixtures1617 <- jsonlite::read_json("https://fantasy.premierleague.com/drf/fixtures/",
simplifyVector = TRUE) %>%
select(-provisional_start_time, -finished_provisional, -started,
-deadline_time, -deadline_time_formatted)
#replace codes with matching values
fixtures1617$team_a <- with(teams, name[match(fixtures1617$team_a, id)])
fixtures1617$team_h <- with(teams, name[match(fixtures1617$team_h, id)])
use_data(fixtures1617, overwrite = TRUE)
glimpse(fixtures1617)
devtools::use_data(fixtures1617, overwrite = TRUE)
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers() %>%
select(-status, -price_change_round, -chance_of_playing_this_round, -chance_of_playing_next_round,
-value_form, -in_dreamteam, -form, -transfers_out_round, -transfers_in_round,
-round_points, -ep_this, -ep_next, -news)
devtools::use_data(players1617, overwrite = TRUE)
test <- fixtures()
test2 <- fixtures1617
devtools::document()
test2 <- fixtures1617
View(test2)
View(test)
devtools::install_github("ewenme/fplR")
test <- fixtures()
test2 <- fixtures1617
test <- fixtures()
library(fplR)
test <- fixtures()
test2 <- fixtures1617
test <- players()
test2 <- players1617
library(dplyr)
library(jsonlite)
library(tibble)
getPlayers <- function() {
#look-up table of player statuses
status <- data.frame(id=c("a", "d", "i", "s", "u"),
player_status=c("Available", "Doubtful", "Injured", "Suspended", "Unavailable"))
#read in json player data, simplify vectors to make easy transfer to dataframe
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
#replace codes with matching values
data$team_name <- with(extract$teams, name[match(data$team_code, code)])
data$position <- with(extract$element_types, singular_name[match(data$element_type, id)])
data$status <- with(status, player_status[match(data$status, id)])
#convert values to fpl-familiar style
data$price <- data$now_cost / 10
data$price_change_abs <- data$cost_change_start / 10
data$price_change_round <- data$cost_change_event / 10
#convert var names
data$transfers_out_round <- data$transfers_out_event
data$transfers_in_round <- data$transfers_in_event
data$round_points <- data$event_points
#convert var types
data$value_form <- as.numeric(data$value_form)
data$value_season <- as.numeric(data$value_season)
data$selected_by_percent <- as.numeric(data$selected_by_percent)
data$form <- as.numeric(data$form)
data$points_per_game <- as.numeric(data$points_per_game)
data$ep_this <- as.numeric(data$ep_this)
data$ep_next <- as.numeric(data$ep_next)
data$influence <- as.numeric(data$influence)
data$creativity <- as.numeric(data$creativity)
data$threat <- as.numeric(data$threat)
data$ict_index <- as.numeric(data$ict_index)
#subset columns
data <- subset(data, select=c(id, code, first_name, second_name, web_name, team_name,
position, status, news, price, price_change_abs,
price_change_round, chance_of_playing_this_round,
chance_of_playing_next_round, value_form, value_season,
in_dreamteam, dreamteam_count, selected_by_percent, form,
transfers_out, transfers_in, transfers_out_round,
transfers_in_round, total_points, round_points,
points_per_game, ep_this, ep_next, minutes, goals_scored,
assists, clean_sheets, goals_conceded, own_goals, penalties_saved,
penalties_missed, yellow_cards, red_cards, saves, bonus, bps,
influence, creativity, threat, ict_index, ea_index))
return(data)
}
players1617 <- getPlayers()
devtools::use_data(players1617, overwrite = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("ewenme/fplR")
install.packages("ggplot2")
library(fplR)
library(dplyr)
library(ggplot2)
chances_created <- players()
View(chances_created)
extract <- jsonlite::read_json("https://fantasy.premierleague.com/drf/bootstrap-static",
simplifyVector = TRUE)
#extract player data ONLY, convert to tibble format
data <- tibble::as.tibble(extract$elements)
View(data)
data <- tibble::as.tibble(extract$events)
View(data)
goals_scored <- players()
goals_scored <- players() %>%
top_n(goals_scored, 10)
goals <- players() %>%
top_n(goals_scored, 10)
goals <- players() %>%
top_n(10, goals_scored)
goals <- players() %>%
top_n(10, goals_scored) %>%
arrange(goals_scored)
goals <- players() %>%
top_n(10, goals_scored) %>%
arrange(desc(goals_scored))
rm(goals_scored)
players() %>%
top_n(10, goals_scored) %>%
arrange(desc(goals_scored)) %>%
ggplot(aes(x=web_name, y=goals_scored)) +
geom_col()
players() %>%
top_n(10, goals_scored) %>%
ggplot(aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col()
players() %>%
top_n(10, goals_scored) %>%
ggplot(aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
top_n(n = 10, wt = goals_scored)
ggplot(data = goals, aes(x=reorder(web_name, -goals_scored), y=goals_scored)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
topScorers <- goals[, 5]
topScorers <- goals[5 ,]
topScorers <- top_n(goals, n = 5, wt=goals_scored)
topScorersDetailed <- list()
topScorersDetailed <- list()
for (i in topScorers$id) {
data <- playerDetailed(player_id = i)
data$name <- topScorers$web_name[topScorers$id == i]
topScorersDetailed[[i]] <- data
}
topScorersDetailed <- bind_rows(topScorersDetailed)
View(topScorersDetailed)
ggplot(data = topScorersDetailed, aes(x=round, y=goals_scored, colour=name)) +
geom_line()
ggplot(data = topScorersDetailed, aes(x=round, y=cumsum(goals_scored), colour=name)) +
geom_line()
ggplot(data = topScorersDetailed, aes(x=round, colour=name)) +
geom_line(aes(y=cumsum(goals_scored)))
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=cumsum(goals_scored)))
topScorersDetailed %>%
group_by(name) %>%
summarise(goals_cs = cumsum(goals_scored)) %>%
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
topScorersDetailed %>%
group_by(name) %>%
summarise(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name, round) %>%
summarise(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored)) %>%
ggplot(data = topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=goals_cs))
View(topScorersDetailed)
ggplot(topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_index))
topScorers <- top_n(goals, n = 3, wt=goals_scored)
topScorersDetailed <- list()
for (i in topScorers$id) {
data <- playerDetailed(player_id = i)
data$name <- topScorers$web_name[topScorers$id == i]
topScorersDetailed[[i]] <- data
}
topScorersDetailed <- bind_rows(topScorersDetailed)
ggplot(topScorersDetailed, aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_index))
topScorersDetailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
View(goals)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90)
top_n(n = 10, wt = goals_per90)
goals <- players() %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
filter(minutes >= 300) %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
goals <- players() %>%
filter(minutes >= 300) %>%
mutate(goals_per90 = goals_scored / minutes * 90) %>%
top_n(n = 10, wt = goals_per90)
ggplot(data = goals, aes(x=reorder(web_name, -goals_per90), y=goals_per90)) +
geom_col() +
theme(axis.text.x=element_text(angle=45,hjust=1))
topPer90 <- top_n(goals, n = 3, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90 <- top_n(goals, n = 3, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90Detailed <- bind_rows(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
View(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
mutate(goals_cs = cumsum(goals_scored), ict_cs = cumsum(ict_index)) %>%
ggplot(aes(x=round, colour=name, group=name)) +
geom_line(aes(y=ict_cs))
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90)
require(tidyr)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=per90, -name)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name)
topPer90Detailed %>%
group_by(web) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var, scales = "free")
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90 <- top_n(goals, n = 5, wt=goals_per90)
topPer90Detailed <- list()
for (i in topPer90$id) {
data <- playerDetailed(player_id = i)
data$name <- topPer90$web_name[topPer90$id == i]
topPer90Detailed[[i]] <- data
}
topPer90Detailed <- bind_rows(topPer90Detailed)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
facet_wrap( ~ var)
topPer90Detailed %>%
group_by(name) %>%
summarise(goals_per90 = sum(goals_scored) / sum(minutes) * 90,
bigChancesCreated_per90 = sum(big_chances_created) / sum(minutes) * 90,
bigChancesMissed_per90 = sum(big_chances_missed) / sum(minutes) * 90,
keyPasses_per90 = sum(key_passes) / sum(minutes) * 90) %>%
gather(key=var, value=value, -name) %>%
ggplot(aes(x=name, y=value)) +
geom_col() +
coord_flip() +
facet_wrap( ~ var)
myHistory <- userHistory(137633)
View(myHistory)
ggplot(data = myHistory, aes(x=season_name, y=total_points, group=1)) +
geom_line()
ggplot(data = myHistory, aes(x=season_name, y=rank, group=1)) +
geom_line()
View(myHistory)
myPerformance <- userPerformance(137633)
View(myPerformance)
myPerformance <- userPerformance(137633)
ggplot(data = myPerformance, aes(x=event, y=points, group=1)) +
geom_line()
View(myPerformance)
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line()
ggplot(data = myPerformance, aes(x=event, y=overall_rank, group=1)) +
geom_line() +
scale_y_reverse()
devtools::build_vignettes()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::build_vignettes()
devtools::document()
devtools::install_github("ewenme/fplR", build_vignettes = TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::use_package("tidyr")
devtools::use_package("ggplot2")
devtools::document()
browseVignettes(package = "fplR")
devtools::install_github("ewenme/fplR", build_vignettes = TRUE, force=TRUE)
browseVignettes("fplR")
devtools::spell_check()
devtools::spell_check()
devtools::document()
source("https://install-github.me/MangoTheCat/goodpractice")
devtools::install_github("hadley/pkgdown")
goodpractice::gp()
pkgdown::build_site()
pkgdown::build_site()
